datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------- AUTH -------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  verifyToken   String?
  password_hash String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  likes         Like[]
  commentLikes  CommentLike[]
  dreams        Dream[]
  dreamons      Dreamon[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------- APP LOGIC -------------------

model Entity {
  entityId   String     @id @default(cuid())
  type       String
  entityType EntityType @relation(fields: [type], references: [typeName])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  dreams     Dream[]
  dreamons   Dreamon[]
  likes      Like[]
  comments   Comment[]
  tags       Tag[]
}

model EntityType {
  typeName String   @id
  entities Entity[]
}

model Dream {
  entity     Entity        @relation(fields: [id], references: [entityId], onDelete: Cascade)
  id         String        @unique
  name       String
  story      String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  categoryId String
  category   DreamCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Dreamon {
  entity      Entity          @relation(fields: [id], references: [entityId], onDelete: Cascade)
  id          String          @unique
  name        String
  image       String?
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  categoryId  String
  category    DreamonCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

// TODO: change to Like
model Like {
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityId String
  entity   Entity @relation(fields: [entityId], references: [entityId], onDelete: Cascade)

  @@id([userId, entityId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    Entity[]
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  entityId  String
  entity    Entity        @relation(fields: [entityId], references: [entityId], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parentId  String?
  parent    Comment?      @relation("CommentToParent", fields: [parentId], references: [id])
  children  Comment[]     @relation("CommentToParent")
  likes     CommentLike[]
}

model CommentLike {
  userId    String
  commentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model DreamCategory {
  id     String  @id @default(cuid())
  name   String
  dreams Dream[]
}

model DreamonCategory {
  id       String    @id @default(cuid())
  name     String
  dreamons Dreamon[]
}
