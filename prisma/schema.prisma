datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------- AUTH -------------------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(uuid())
  name             String?
  // TODO: probably remove username
  username         String?       @unique
  email            String?       @unique
  emailVerified    DateTime?
  verifyEmailToken String?
  password_hash    String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  image            String?
  accounts         Account[]
  sessions         Session[]
  comments         Comment[]
  likes            Like[]
  commentLikes     CommentLike[]
  dreams           Dream[]
  dreamons         Dreamon[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------- APP LOGIC -------------------

model Entity {
  entityId   String        @id @default(uuid())
  type       String
  entityType EntityType    @relation(fields: [type], references: [typeName])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  dreams     Dream[]
  dreamons   Dreamon[]
  likes      Like[]
  comments   Comment[]
  tags       EntityToTag[]
}

model EntityType {
  typeName String   @id
  entities Entity[]
}

model Dream {
  id              String           @id @unique
  entity          Entity           @relation(fields: [id], references: [entityId], onDelete: Cascade)
  name            String
  story           String
  image           String?
  date            DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  categoryId      Int
  category        DreamCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isPrivate       Boolean          @default(false)
  disableComments Boolean          @default(false)
  disableLikes    Boolean          @default(false)
  emotions        EmotionToDream[]
}

model Emotion {
  id     Int              @id @default(autoincrement())
  name   String           @unique
  emoji  String
  dreams EmotionToDream[]
}

model EmotionToDream {
  emotionId Int
  dreamId   String
  emotion   Emotion @relation(fields: [emotionId], references: [id])
  dream     Dream   @relation(fields: [dreamId], references: [id])

  @@id([emotionId, dreamId])
}

model Dreamon {
  entity      Entity          @relation(fields: [id], references: [entityId], onDelete: Cascade)
  id          String          @id @unique
  name        String
  image       String?
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  categoryId  Int
  category    DreamonCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Like {
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityId String
  entity   Entity @relation(fields: [entityId], references: [entityId], onDelete: Cascade)

  @@id([userId, entityId])
}

// TODO: remove additional fields, fix primary key no serial, fix updatedAt
model Tag {
  name      String        @id @unique @db.VarChar(20)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  entities  EntityToTag[]
}

model EntityToTag {
  entityId String
  tagName  String
  entity   Entity @relation(fields: [entityId], references: [entityId], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagName], references: [name], onDelete: Cascade)

  @@id([entityId, tagName])
}

model Comment {
  id        String        @id @default(uuid())
  content   String        @db.VarChar(500)
  entityId  String
  entity    Entity        @relation(fields: [entityId], references: [entityId], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parentId  String?
  parent    Comment?      @relation("CommentToParent", fields: [parentId], references: [id])
  children  Comment[]     @relation("CommentToParent")
  likes     CommentLike[]
}

model CommentLike {
  userId    String
  commentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model DreamCategory {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  dreams Dream[]
}

model DreamonCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  dreamons Dreamon[]
}
