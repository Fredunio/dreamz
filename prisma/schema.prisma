datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------- AUTH -------------------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(uuid())
  name              String?
  username          String?            @unique
  email             String?            @unique
  emailVerified     DateTime?
  verifyEmailToken  String?
  password_hash     String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  image             String?
  background        String?
  bio               String?
  birthday          DateTime?          @db.Date
  showEmail         Boolean            @default(false)
  showBirthday      Boolean            @default(false)
  accounts          Account[]
  sessions          Session[]
  dreamComments     DreamComment[]
  dreamLikes        DreamLike[]
  dreamCommentLikes DreamCommentLike[]
  dreams            Dream[]
  dreamons          Dreamon[]
  dreamonLikes      DreamonLike[]
  zodiac            String?
  zodiacSign        ZodiacSign?        @relation(fields: [zodiac], references: [name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------- APP LOGIC -------------------

model Dream {
  id              String            @id @unique @default(uuid())
  // entity          Entity           @relation(fields: [id], references: [entityId], onDelete: Cascade)
  name            String
  story           String
  imageName       String?
  date            DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  categoryId      Int
  category        DreamCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isPrivate       Boolean           @default(false)
  disableComments Boolean           @default(false)
  disableLikes    Boolean           @default(false)
  likes           DreamLike[]
  comments        DreamComment[]
  emotions        EmotionToDream[]
  tags            DreamToDreamTag[]
}

model Emotion {
  id     Int              @id @default(autoincrement())
  name   String           @unique
  emoji  String
  dreams EmotionToDream[]
}

model EmotionToDream {
  emotionId Int
  dreamId   String
  emotion   Emotion @relation(fields: [emotionId], references: [id])
  dream     Dream   @relation(fields: [dreamId], references: [id])

  @@id([emotionId, dreamId])
}

model Dreamon {
  id          String          @id @unique @default(uuid())
  // entity      Entity          @relation(fields: [id], references: [entityId], onDelete: Cascade)
  name        String
  image       String?
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  categoryId  Int
  category    DreamonCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isPrivate   Boolean         @default(false)
  likes       DreamonLike[]
}

model DreamLike {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  dreamId String
  dream   Dream  @relation(fields: [dreamId], references: [id], onDelete: Cascade)

  @@id([userId, dreamId])
}

model DreamonLike {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dreamonId String
  dreamon   Dreamon @relation(fields: [dreamonId], references: [id], onDelete: Cascade)

  @@id([userId, dreamonId])
}

// TODO: remove additional fields, fix primary key no serial, fix updatedAt
model DreamTag {
  name      String            @id @unique @db.VarChar(20)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  dreams    DreamToDreamTag[]
  // entities  EntityToTag[]
}

model DreamToDreamTag {
  dreamId String
  tagId   String
  dream   Dream    @relation(fields: [dreamId], references: [id])
  tag     DreamTag @relation(fields: [tagId], references: [name])

  @@id([dreamId, tagId])
}

model DreamComment {
  id        String             @id @default(uuid())
  content   String             @db.VarChar(500)
  dreamId   String
  dream     Dream              @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  // entityId  String
  // entity    Entity        @relation(fields: [entityId], references: [entityId], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parentId  String?
  parent    DreamComment?      @relation("CommentToParent", fields: [parentId], references: [id])
  children  DreamComment[]     @relation("CommentToParent")
  likes     DreamCommentLike[]
}

model DreamCommentLike {
  userId    String
  commentId String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   DreamComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model DreamCategory {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  dreams Dream[]
}

model DreamonCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  dreamons Dreamon[]
}

model ZodiacSign {
  name String @id @unique
  User User[]
}
